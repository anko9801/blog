<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Heuristics on</title><link>https://anko9801.github.io/blog/heuristic/</link><description>Recent content in Heuristics on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://anko9801.github.io/blog/heuristic/index.xml" rel="self" type="application/rss+xml"/><item><title>chokudai サーチ</title><link>https://anko9801.github.io/blog/heuristic/chokudai_search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/heuristic/chokudai_search/</guid><description>説明 ビームサーチにおいてビーム幅を1から順に増やしていく手法。実行時間が決まっているときやあるスコア基準を満たしたいときに管理しやすい。
実装 参考 chokudaiサーチ chokudaiサーチ(ビームサーチ亜種)の利点の話</description></item><item><title>ヒューリスティック</title><link>https://anko9801.github.io/blog/heuristic/heuristic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/heuristic/heuristic/</guid><description>説明 実装 {% include cpp.html code=&amp;ldquo;template/heuristic.cpp&amp;rdquo; %}</description></item><item><title>ビームサーチ</title><link>https://anko9801.github.io/blog/heuristic/beam_search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/heuristic/beam_search/</guid><description>説明 幅優先探索の各階層においてスコアが高い順に $d$ 個のみを採用していく。$d$ をビーム幅と呼ぶ。
実装 参考 chokudaiサーチ</description></item><item><title>山登り法</title><link>https://anko9801.github.io/blog/heuristic/hill_climbing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/heuristic/hill_climbing/</guid><description>説明 初めに初期状態を設定し、近傍へ状態遷移したとき最も成績の良い解を新しい状態とし、これを繰り返すことで極値が見つかる。
実装 {% include cpp.html code=&amp;ldquo;template/heuristic.cpp&amp;rdquo; %}
使用例 参考</description></item><item><title>焼きなまし法</title><link>https://anko9801.github.io/blog/heuristic/simulated_annealing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/heuristic/simulated_annealing/</guid><description>説明 山登り法は常にスコアが最大のものを採用するが、焼きなまし法では遷移確率関数を用いてスコアに応じて確率的に遷移させるようにする。
温度関数は最初は大きく、時間が経つにつれて小さくなるような関数で、温度が高いほど発散し、低いほど収束するように遷移確率関数を調整する。
実装 {% include cpp.html code=&amp;ldquo;template/heuristic.cpp&amp;rdquo; %}
使用例 参考</description></item></channel></rss>