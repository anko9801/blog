<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pwns on</title><link>https://anko9801.github.io/blog/pwn/</link><description>Recent content in Pwns on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://anko9801.github.io/blog/pwn/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://anko9801.github.io/blog/pwn/LinuxKernel/Kernel/kernel_reading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxKernel/Kernel/kernel_reading/</guid><description>tkmru/linux-insides-ja: Japanese version of linux-insides book (github.com) Cryptogenic/PS5-IPV6-Kernel-Exploit: An experimental webkit-based kernel exploit (Arb. R/W) for the PS5 on &amp;lt;= 4.</description></item><item><title/><link>https://anko9801.github.io/blog/pwn/LinuxUserland/HeapExploit/tcache_poisoning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxUserland/HeapExploit/tcache_poisoning/</guid><description>ヒープ関連 C++ vtable overwrite C++では仮想関数を実現する為に実行バイナリ中に型に対して呼び出す関数の対応表( vtable : virtual method table )を持つ。このvtableの行先を書き換える。たぶん、C++だけではなく動的ポリモーフィズムを選択した言語なら出来そう。 動的ポリモーフィズム C++ 静的ポリモーフィズム Rust ヒープオーバーフローによるC++ vtable overwriteをやってみる - ももいろテクノロジー use-after-freeによるC++ vtable overwriteをやってみる - ももいろテクノロジー _IO_str_overflow を使ったvtable改竄検知の回避手法 - CTFするぞ</description></item><item><title/><link>https://anko9801.github.io/blog/pwn/LinuxUserland/StackExploit/ret2xxx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxUserland/StackExploit/ret2xxx/</guid><description>libcリーク : libc leak libc内のアドレスをputs, printf関数などで出力させる。 ret2XX リターンアドレスを書き換える。
ret2libc ret2plt ret2csu glibc code reading 〜なぜ俺達のglibcは後方互換を捨てたのか〜 - HackMD</description></item><item><title/><link>https://anko9801.github.io/blog/pwn/LinuxUserland/StackExploit/vulnssecurity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxUserland/StackExploit/vulnssecurity/</guid><description>脆弱性 Stack BOF (Stack-based buffer overflow) スタック上のオーバーフローを利用してリターンアドレスやローカル変数を書き換えられる。
トリガー メモリ書き換え (文字列入力、文字列入力の最後尾にヌル文字を挿入するなど) 防御機構 SSP canary 単純なスタックバッファオーバーフロー攻撃をやってみる - ももいろテクノロジー Stack underflow 関数フレーム外までpopを行う。</description></item><item><title>Automatic Exploit Generation</title><link>https://anko9801.github.io/blog/pwn/AEG/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/AEG/</guid><description>説明 自動的にexploitを行うコードを生成する. バグを見つけるパートとexploitを生成するパートがある. バグを見つけるときはシンボリック実行エンジンを使う. ただ実行するだけだと実行時間がかなり長くなってしまう. これを効率的に行う為には前条件を用いるとよい. 前条件に使われるものは次のようなものがある.
Known Length: BOF検知 Known Prefix: HTTPヘッダ Concolic Execution 疑問 ライブラリの定理証明をしていった方が良いのでは
参考文献 AEG: Automatic Exploit Generation (psu.</description></item><item><title>eBPF</title><link>https://anko9801.github.io/blog/pwn/LinuxKernel/eBPF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxKernel/eBPF/</guid><description/></item><item><title>Format String Attack</title><link>https://anko9801.github.io/blog/pwn/LinuxUserland/FormatStringAttack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxUserland/FormatStringAttack/</guid><description>Format String Bug 書式をprintfの第一引数に入れることで読み込んだり書き込める.</description></item><item><title>glibc</title><link>https://anko9801.github.io/blog/pwn/LinuxUserland/glibc/glibc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxUserland/glibc/glibc/</guid><description>glibc ビルド方法 https://www.gnu.org/software/libc/ のリリースページから ftp に飛んでダウンロードする. ビルド作業用のディレクトリを作ってそこに入る ../glibc-hoge/congifure --prefix=/path/to/インストールしたい場所 make -j{N} make install glibc 自前ビルドしてるとデバッグ情報も付いてくる. patchelf では手で叩かないといけない.</description></item><item><title>glibc malloc</title><link>https://anko9801.github.io/blog/pwn/LinuxUserland/HeapExploit/malloc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxUserland/HeapExploit/malloc/</guid><description>説明 malloc動画と呼ばれている The 67th Yokohama kernel reading party - YouTube は必見です！
資料 [https://www.youtube.com/watch?v=0-vWT-t0UHg] malloc(3)のメモリ管理構造 - VALINUX mallocの動作を追いかける(mmap編) heap-exploitation 攻撃デモ how2heap ヒープ系問題におけるstdout / stderrを利用したメモリリーク - CTFするぞ</description></item><item><title>GOT overwrite</title><link>https://anko9801.github.io/blog/pwn/LinuxUserland/GOToverwrite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxUserland/GOToverwrite/</guid><description>GOT ( Global Offset Table ) の行先を書き換える。 ROPでscanfして書き換えたりできる
防御機構 Full RELRO</description></item><item><title>Heap における脆弱性とセキュリティ機構</title><link>https://anko9801.github.io/blog/pwn/LinuxUserland/HeapExploit/vulnssecurity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxUserland/HeapExploit/vulnssecurity/</guid><description>脆弱性 Heap BOF ヒープバッファオーバーフロー : Heap-based buffer overflow ヒープ上のバッファオーバーフローを利用して、関数の戻りアドレスや関数ポインタを書き換える ヒープオーバーフローによるGOT overwriteをやってみる - ももいろテクノロジー ヒープオーバーフローによるC++ vtable overwriteをやってみる - ももいろテクノロジー
Use After Free use-after-free 解放した領域を誤って使用してしまうUse After Freeを利用し、同じ領域に悪意のあるデータ構造を確保して利用させる事で、関数ポインタを書き換える。 use-after-freeによるGOT overwriteをやってみる - ももいろテクノロジー use-after-freeによるC++ vtable overwriteをやってみる - ももいろテクノロジー</description></item><item><title>House of Botcake</title><link>https://anko9801.github.io/blog/pwn/LinuxUserland/HeapExploit/HouseOfXXX/HouseOfBotcake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxUserland/HeapExploit/HouseOfXXX/HouseOfBotcake/</guid><description>unsorted binの fd は main_arena.top を指す。 libc内の main_arena.top のオフセットが分かれば libc base address</description></item><item><title>House of Lore</title><link>https://anko9801.github.io/blog/pwn/LinuxUserland/HeapExploit/HouseOfXXX/HouseOfLore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxUserland/HeapExploit/HouseOfXXX/HouseOfLore/</guid><description/></item><item><title>House of Orange</title><link>https://anko9801.github.io/blog/pwn/LinuxUserland/HeapExploit/HouseOfXXX/HouseOfOrange/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxUserland/HeapExploit/HouseOfXXX/HouseOfOrange/</guid><description>本質: top chunk のサイズを書き換えることで _int_free を呼び出す. 応用: https://ptr-yudai.hatenablog.com/entry/2019/10/12/181931</description></item><item><title>House of Spirit</title><link>https://anko9801.github.io/blog/pwn/LinuxUserland/HeapExploit/HouseOfXXX/HouseOfSpirit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxUserland/HeapExploit/HouseOfXXX/HouseOfSpirit/</guid><description/></item><item><title>Kernel Exploit用テンプレート</title><link>https://anko9801.github.io/blog/pwn/LinuxKernel/kernel_exploit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxKernel/kernel_exploit/</guid><description>説明 pwnのKernel Exploit時に使うテンプレート
実装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from ptrlib import * import time import base64 import os def run(cmd): sock.</description></item><item><title>Linux Userland のセキュリティ機構</title><link>https://anko9801.github.io/blog/pwn/LinuxUserland/vulnssecurity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxUserland/vulnssecurity/</guid><description>Anti-Exploits DEP (Data Execution Prevention) NX bit (No eXecute bit) read write execute protection セグメント毎に実行する権限を付与するかしないかを設定する。任意のコードを挿入し実行を誘う攻撃を防御できる。 メモリ領域のアクセス保護オプションを書き換えるには、Windowsの場合VirtualProtectEx関数、Linuxの場合mprotect(2)が使える。([https://inaz2.hatenablog.com/entry/2014/04/20/010545 Return-to-libcとmprotect(2)でDEPを回避してみる - ももいろテクノロジー] より)</description></item><item><title>pwn を解く為に必要なステップ</title><link>https://anko9801.github.io/blog/pwn/LinuxUserland/method/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxUserland/method/</guid><description>脆弱性の種類と，その攻略方法 Vulnerabilities: Stack BOF, Heap BOF, Use After Free, Format String Bug, Race Condition &amp;hellip; Exploit Techniques: ret2plt, ret2libc, ROP, GOT Overwrite, Stack pivot &amp;hellip; Anti-Exploits: NX, ASLR, RELRO, PIE, Stack Canary &amp;hellip;</description></item><item><title>pwnテンプレート</title><link>https://anko9801.github.io/blog/pwn/LinuxUserland/template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxUserland/template/</guid><description>説明 CTFのpwn分野で使うテンプレート。pwntoolsパッケージを使用する。
実装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from pwn import * import sys binary_path = &amp;#39;.</description></item><item><title>ROP; Return-Oriented Programming</title><link>https://anko9801.github.io/blog/pwn/LinuxUserland/StackExploit/ROP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/LinuxUserland/StackExploit/ROP/</guid><description>ROP : Return-Oriented Programming ret命令で終わる少ない命令列(Gadget)を組み合わせてret2hogeをする。呼び出し規約 #Pwn_よく使うglibcの関数まとめ がcdeclなどスタックを用いる場合、3つ以上の関数を呼ぶとき引数が関数アドレスと被らないように引数を削除する為のpop retガジェットを挟む。fastcallなどレジスタを用いる場合、レジスタに引数を渡すためにpop rdi retガジェット等を使う。
防御機構 Intel CET 【pwn 36.0】Intel CETが、みんなの恋人ROPを殺す - newbieからバイナリアンへ x64でスタックバッファオーバーフローをやってみる - ももいろテクノロジー</description></item></channel></rss>