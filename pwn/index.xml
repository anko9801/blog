<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pwns on</title><link>https://anko9801.github.io/blog/pwn/</link><description>Recent content in Pwns on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://anko9801.github.io/blog/pwn/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://anko9801.github.io/blog/pwn/glibc/glibc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/glibc/glibc/</guid><description>glibc ビルド方法 https://www.gnu.org/software/libc/ のリリースページから ftp に飛んでダウンロードする. ビルド作業用のディレクトリを作ってそこに入る ../glibc-hoge/congifure --prefix=/path/to/インストールしたい場所 make -j{N} make install glibc 自前ビルドしてるとデバッグ情報も付いてくる. patchelf では手で叩かないといけない. pwninit なら glibc を同じ階層に入れておけば pwninit で勝手にやってくれる.</description></item><item><title>Automatic Exploit Generation</title><link>https://anko9801.github.io/blog/pwn/AEG/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/AEG/</guid><description>説明 自動的にexploitを行うコードを生成する
参考文献 AEG: Automatic Exploit Generation (psu.edu)</description></item><item><title>eBPF</title><link>https://anko9801.github.io/blog/pwn/eBPF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/eBPF/</guid><description/></item><item><title>glibc malloc</title><link>https://anko9801.github.io/blog/pwn/glibc/malloc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/glibc/malloc/</guid><description>説明 環境 64bit
glibc のデータ領域に main_arena malloc_state
1 m binには沢山の種類がある
tcache fastbins unsorted bins small bins large bins ヒープ領域</description></item><item><title>House of botcake</title><link>https://anko9801.github.io/blog/pwn/HouseOfXXX/House_of_botcake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/HouseOfXXX/House_of_botcake/</guid><description>unsorted binの fd は main_arena.top を指す。 libc内の main_arena.top のオフセットが分かれば libc base address</description></item><item><title>House of lore</title><link>https://anko9801.github.io/blog/pwn/HouseOfXXX/house_of_lore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/HouseOfXXX/house_of_lore/</guid><description/></item><item><title>House of Orange</title><link>https://anko9801.github.io/blog/pwn/HouseOfXXX/house_of_orange/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/HouseOfXXX/house_of_orange/</guid><description>本質: top chunk のサイズを書き換えることで _int_free を呼び出す. 応用: https://ptr-yudai.hatenablog.com/entry/2019/10/12/181931</description></item><item><title>House of spirit</title><link>https://anko9801.github.io/blog/pwn/HouseOfXXX/house_of_spirit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/HouseOfXXX/house_of_spirit/</guid><description/></item><item><title>Kernel Exploit用テンプレート</title><link>https://anko9801.github.io/blog/pwn/kernel_exploit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/kernel_exploit/</guid><description>説明 pwnのKernel Exploit時に使うテンプレート
実装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from ptrlib import * import time import base64 import os def run(cmd): sock.</description></item><item><title>pwn</title><link>https://anko9801.github.io/blog/pwn/pwn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/pwn/</guid><description>説明 CTFのpwn分野で使うテンプレート。pwntoolsパッケージを使用する。
実装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from pwn import * import sys binary_path = &amp;#39;.</description></item><item><title>デバッガ</title><link>https://anko9801.github.io/blog/pwn/Debugger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/pwn/Debugger/</guid><description>ptrace
gdb
gdb-peda
pwndbg
rust-gdb
Ghidra
IDA Pro
Binary Ninja</description></item></channel></rss>