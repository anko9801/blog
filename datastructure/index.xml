<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DataStructures on</title><link>https://anko9801.github.io/blog/datastructure/</link><description>Recent content in DataStructures on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://anko9801.github.io/blog/datastructure/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://anko9801.github.io/blog/DataStructure/LinkedList/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/DataStructure/LinkedList/</guid><description>1 2 3 4 pub enum List { Empty, Elem(i32, List), } 単方向だと要素を追加するときに前のリストを変更する必要が無いから永続化可能</description></item><item><title>Binary Indexed Tree</title><link>https://anko9801.github.io/blog/DataStructure/BIT/BIT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/DataStructure/BIT/BIT/</guid><description>説明 計算量 add $O(\log N)$ sum $O(\log N)$ 実装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 template &amp;lt;typename T&amp;gt; class BIT { int N; vector&amp;lt;T&amp;gt; bit; BIT(isizet size) { N = size + 2; bit.</description></item><item><title>Segment tree beats</title><link>https://anko9801.github.io/blog/DataStructure/SegTree/SegTreeBeats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/DataStructure/SegTree/SegTreeBeats/</guid><description>説明 計算量 実装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 #include &amp;lt;algorithm&amp;gt;#include &amp;lt;cassert&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;using namespace std; using ll = long long; #define N 10003 class SegmentTreeBeats { const ll inf = 1e18; int n, n0; ll max_v[4 * N], smax_v[4 * N]; ll sum[4 * N], max_c[4 * N]; void update_node_max(int k, ll x) { sum[k] += (x - max_v[k]) * max_c[k]; max_v[k] = x; } void push(int k) { if (max_v[k] &amp;lt; max_v[2 * k + 1]) update_node_max(2 * k + 1, max_v[k]); if (max_v[k] &amp;lt; max_v[2 * k + 2]) update_node_max(2 * k + 2, max_v[k]); } void update(int k) { sum[k] = sum[2 * k + 1] + sum[2 * k + 2]; if (max_v[2 * k + 1] &amp;lt; max_v[2 * k + 2]) { max_v[k] = max_v[2 * k + 2]; max_c[k] = max_c[2 * k + 2]; smax_v[k] = max(max_v[2 * k + 1], smax_v[2 * k + 2]); } else if (max_v[2 * k + 1] &amp;gt; max_v[2 * k + 2]) { max_v[k] = max_v[2 * k + 1]; max_c[k] = max_c[2 * k + 1]; smax_v[k] = max(smax_v[2 * k + 1], max_v[2 * k + 2]); } else { max_v[k] = max_v[2 * k + 1]; max_c[k] = max_c[2 * k + 1] + max_c[2 * k + 2]; smax_v[k] = max(smax_v[2 * k + 1], smax_v[2 * k + 2]); } } void _update_min(ll x, int a, int b, int k, int l, int r) { if (b &amp;lt;= l || r &amp;lt;= a || max_v[k] &amp;lt;= x) return; if (a &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= b &amp;amp;&amp;amp; smax_v[k] &amp;lt; x) { update_node_max(k, x); return; } push(k); _update_min(x, a, b, 2 * k + 1, l, (l + r) / 2); _update_min(x, a, b, 2 * k + 2, (l + r) / 2, r); update(k); } ll _query_max(int a, int b, int k, int l, int r) { if (b &amp;lt;= l || r &amp;lt;= a) return 0; if (a &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= b) return max_v[k]; push(k); ll lv = _query_max(a, b, 2 * k + 1, l, (l + r) / 2); ll rv = _query_max(a, b, 2 * k + 2, (l + r) / 2, r); return max(lv, rv); } ll _query_sum(int a, int b, int k, int l, int r) { if (b &amp;lt;= l || r &amp;lt;= a) return 0; if (a &amp;lt;= l &amp;amp;&amp;amp; r &amp;lt;= b) return sum[k]; push(k); ll lv = _query_sum(a, b, 2 * k + 1, l, (l + r) / 2); ll rv = _query_sum(a, b, 2 * k + 2, (l + r) / 2, r); return lv + rv; } public: SegmentTreeBeats(int n) { SegmentTreeBeats(n, nullptr); } SegmentTreeBeats(int n, ll *a) : n(n) { n0 = 1; while (n0 &amp;lt; n) n0 &amp;lt;&amp;lt;= 1; for (int i = 0; i &amp;lt; n; ++i) { max_v[n0 - 1 + i] = sum[n0 - 1 + i] = (a !</description></item><item><title>Slope Trick</title><link>https://anko9801.github.io/blog/DataStructure/SlopeTrick/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/DataStructure/SlopeTrick/</guid><description>説明 計算量 実装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 #include &amp;lt;iostream&amp;gt;#include &amp;lt;queue&amp;gt;#include &amp;lt;vector&amp;gt; template &amp;lt;typename T&amp;gt; using pq = std::priority_queue&amp;lt;T, std::vector&amp;lt;T&amp;gt;, std::greater&amp;lt;T&amp;gt;&amp;gt;; struct SlopeTrick { const long long LINF = 0x1fffffffffffffff; long long minf = -1; std::priority_queue&amp;lt;long long&amp;gt; L; pq&amp;lt;long long&amp;gt; R; long long shift_left = -1; long long shift_right = -1; SlopeTrick() {} private: void L_push(long long a) { L.</description></item><item><title>Treap</title><link>https://anko9801.github.io/blog/DataStructure/BinarySearchTree/Treap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/DataStructure/BinarySearchTree/Treap/</guid><description>説明 計算量 $O(\log n)$
実装 使用例 参考 Implicit Treap - 競プロ練習記録 (hatenablog.com) プログラミングコンテストでのデータ構造 2　～平衡二分探索木編～ (slideshare.net) データ構造とアルゴリズム AVL木 (平衡探索木) (uec.</description></item><item><title>UnionFind</title><link>https://anko9801.github.io/blog/DataStructure/UnionFind/UnionFind/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/DataStructure/UnionFind/UnionFind/</guid><description>説明 素集合を管理するデータ構造。内部的には森となっていて同じルートを持つ木の要素は同じ素集合にあると解釈して併合/比較を行う。
以下の工夫により高速化できる。
経路圧縮 (path compression) 再帰的に根を調べる際に根に直接つなぎ直す。 併合の工夫 併合時に木の高さ/大きさが小さい方を大きい方へ繋げる。 木の高さのときunion by rankと呼び、木の大きさのときunion by sizeと呼ぶ。 計算量 経路圧縮のみ $O(\log{N})$ 併合の工夫のみ $O(\log{N})$ 両方 $O(\alpha(N))$ 実装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include &amp;lt;vector&amp;gt; struct UnionFind { std::vector&amp;lt;int&amp;gt; rank, parents; UnionFind() {} UnionFind(int n) { rank.</description></item><item><title>セグメント木</title><link>https://anko9801.github.io/blog/DataStructure/SegTree/SegTree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/DataStructure/SegTree/SegTree/</guid><description>説明 計算量 実装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 #include &amp;lt;algorithm&amp;gt;#include &amp;lt;cassert&amp;gt;#include &amp;lt;vector&amp;gt; template &amp;lt;class S, S (*op)(S, S), S (*e)()&amp;gt; struct segtree { private: int _n, size, log; std::vector&amp;lt;S&amp;gt; d; public: segtree() : segtree(0) {} explicit segtree(int n) : segtree(std::vector&amp;lt;S&amp;gt;(n, e())) {} explicit segtree(const std::vector&amp;lt;S&amp;gt; &amp;amp;v) : _n(int(v.</description></item><item><title>セグメント木</title><link>https://anko9801.github.io/blog/DataStructure/SegTree/SparseTable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/DataStructure/SegTree/SparseTable/</guid><description>説明 計算量 構築 O(NlogN) クエリ O(1)
実装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 template &amp;lt;typename T&amp;gt; struct SparseTable { vector&amp;lt;vector&amp;lt;T&amp;gt;&amp;gt; st; vector&amp;lt;int&amp;gt; lookup; SparseTable(const vector&amp;lt;T&amp;gt; &amp;amp;v) { int b = 0; while ((1 &amp;lt;&amp;lt; b) &amp;lt;= v.</description></item><item><title>ポテンシャル付きUnionFind</title><link>https://anko9801.github.io/blog/DataStructure/UnionFind/PotentialUnionFind/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/DataStructure/UnionFind/PotentialUnionFind/</guid><description>説明 各頂点はポテンシャルを管理する。ポテンシャルの差がインターフェースとなる。重み付きUnionFindとも言う。
計算量 $O(\alpha(N))$
実装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 struct PotentialUnionFindTree { vec&amp;lt;ll&amp;gt; par, diff; PotentialUnionFindTree(ll n) { par.</description></item><item><title>永続UnionFind</title><link>https://anko9801.github.io/blog/DataStructure/UnionFind/PersistUnionFind/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/DataStructure/UnionFind/PersistUnionFind/</guid><description>説明 計算量 実装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 struct PartiallyParsistUnionFind { vector&amp;lt;ll&amp;gt; rank, par, time; PartiallyParsistUnionFind(ll n) { rank.</description></item><item><title>永続セグメント木</title><link>https://anko9801.github.io/blog/DataStructure/SegTree/PersistentSegtree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/DataStructure/SegTree/PersistentSegtree/</guid><description>説明 計算量 実装 参考文献 つくってなぐろ (永続配列/永続Union-Find木/永続セグメント木の作り方と意義、具体例) - Qiita</description></item><item><title>遅延セグメント木</title><link>https://anko9801.github.io/blog/DataStructure/SegTree/LazySegTree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/DataStructure/SegTree/LazySegTree/</guid><description>説明 計算量 実装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 #include &amp;lt;algorithm&amp;gt;#include &amp;lt;cassert&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt; namespace internal { int ceil_pow2(int n) { int x = 0; while ((1U &amp;lt;&amp;lt; x) &amp;lt; (unsigned int)(n)) x++; return x; } } // namespace internal template &amp;lt;class S, S (*op)(S, S), S (*e)(), class F, S (*mapping)(F, S), F (*composition)(F, F), F (*id)()&amp;gt; struct lazy_segtree { private: int _n, size, log; std::vector&amp;lt;S&amp;gt; node; std::vector&amp;lt;F&amp;gt; lazy; public: lazy_segtree() : lazy_segtree(0) {} explicit lazy_segtree(int n) : lazy_segtree(std::vector&amp;lt;S&amp;gt;(n, e())) {} explicit lazy_segtree(const std::vector&amp;lt;S&amp;gt; &amp;amp;v) : _n(int(v.</description></item></channel></rss>