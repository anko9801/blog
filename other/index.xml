<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Others on</title><link>https://anko9801.github.io/blog/other/</link><description>Recent content in Others on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://anko9801.github.io/blog/other/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://anko9801.github.io/blog/other/Application/OS/ACPI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/OS/ACPI/</guid><description/></item><item><title/><link>https://anko9801.github.io/blog/other/Application/OS/BIOS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/OS/BIOS/</guid><description/></item><item><title/><link>https://anko9801.github.io/blog/other/Application/OS/FileSystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/OS/FileSystem/</guid><description/></item><item><title/><link>https://anko9801.github.io/blog/other/Application/OS/Keyboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/OS/Keyboard/</guid><description/></item><item><title/><link>https://anko9801.github.io/blog/other/Application/OS/Scheduler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/OS/Scheduler/</guid><description>タスク ジョブ、プロセス、スレッド
プロセススケジューラ スケジュールする単位はタスク。タスクはプロセスやスレッドによって作業している仕事のこと。
初期スケジューラ (~v2.4) 実行可能タスクは一般にランキューと呼ばれるキューに繋がれています。 $O(n)$
ランキューから順方向に全走査してタイムスライスが最大のタスクにコンテキストスイッチ。 インターバルタイマーが割り込み、タイムスライスを減らす。 タイムスライスを使い果たすとランキュー末尾に挿入。 1~3をすべての実行可能タスクのタイムスライスが0になるまで繰り返し、すべて使い果たしたらタイムスライスを初期化。このとき、スリープ状態のタスクには少しタイムスライスを追加。 nice 値が小さいほどタイムスライスが貰える。有効範囲は -19 ~ 20 で root でないとマイナス値を設定できない。 nice() システムコールによって変更可能。</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Profiler/perf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Profiler/perf/</guid><description>perfから読み解くプロセッサトレースの仕組み (perf + Intel PT/ARM CoreSight) - Qiita</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Server/kernel-optimization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Server/kernel-optimization/</guid><description>カーネルパラメータ チューニング 【Linux】カーネルパラメータのパフォーマンスチューニングについて
ファイルディスクリプタの上限 ulimit -l 10000
sshだとulimitできない https://yohei-a.hatenablog.jp/entry/20090310/1236706236
http://ramblog.blog129.fc2.com/blog-category-4.html
1 2 3 # /etc/systemd/system/*.service [Service] LimitNOFILE=65535 カーネルパラメータ 上ほど優先順位高い(同じ名前のfileをoverrideする) /etc/sysctl.</description></item><item><title/><link>https://anko9801.github.io/blog/other/Circuit/FPGA-HDL-%E8%AB%96%E7%90%86%E5%9B%9E%E8%B7%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Circuit/FPGA-HDL-%E8%AB%96%E7%90%86%E5%9B%9E%E8%B7%AF/</guid><description/></item><item><title/><link>https://anko9801.github.io/blog/other/Circuit/PC%E5%91%A8%E8%BE%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Circuit/PC%E5%91%A8%E8%BE%BA/</guid><description>ディスク CrystalDisk CrystalDiskMark
スクリーン ブラウン管 ニキシー管 液晶</description></item><item><title/><link>https://anko9801.github.io/blog/other/Circuit/%E3%82%A2%E3%83%8A%E3%83%AD%E3%82%B0-%E3%82%BB%E3%83%B3%E3%82%B5%E3%83%BC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Circuit/%E3%82%A2%E3%83%8A%E3%83%AD%E3%82%B0-%E3%82%BB%E3%83%B3%E3%82%B5%E3%83%BC/</guid><description>液晶</description></item><item><title/><link>https://anko9801.github.io/blog/other/Circuit/%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E5%88%B6%E5%BE%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Circuit/%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E5%88%B6%E5%BE%A1/</guid><description>モーターコントローラー Hブリッジを用いて電気を流し正転、逆転するのと逆起電力によるブレーキを操作している。 MOSFET を4つ</description></item><item><title/><link>https://anko9801.github.io/blog/other/Circuit/%E3%83%91%E3%83%AF%E3%82%A8%E3%83%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Circuit/%E3%83%91%E3%83%AF%E3%82%A8%E3%83%AC/</guid><description>電源 LCRメーター</description></item><item><title/><link>https://anko9801.github.io/blog/other/Circuit/%E3%83%9E%E3%82%A4%E3%82%B3%E3%83%B3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Circuit/%E3%83%9E%E3%82%A4%E3%82%B3%E3%83%B3/</guid><description>マイコンの一番楽しい所ってなに
主に次を使うことが多いです。
ATmega328P (Arduino) RP2040 (Raspberry Pi Pico) STM32 Nucleo (STM32F303K8) Universal Asynchronous Receiver/Transmitter: UART
Hardware Abstraction Layer (HAL)</description></item><item><title/><link>https://anko9801.github.io/blog/other/Idea/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Idea/</guid><description>version update時の確認不足で何かしらの悪意のあるプログラムを入れることができる</description></item><item><title/><link>https://anko9801.github.io/blog/other/streat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/streat/</guid><description>物理学 生物学 ロケット 飛行
回路 トランジスタ (NPN接合)
AVRマイコンライター自作 電源自作 JTAG によるデバッグ FPGA による RISC-V CPU 自作 CPU Break toolchain 自作 プログラミング言語自作 OS自作 Kernel Exploit ロスレス音声コーデック (PARCOR係数・エンコード済み残差信号) Video DeepLearning</description></item><item><title>AWS</title><link>https://anko9801.github.io/blog/other/Application/Server/AWS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Server/AWS/</guid><description>7777 - Your remote AWS database on your local port 7777
Scanning for AWS Security Issues With Trivy | liamg</description></item><item><title>ELF</title><link>https://anko9801.github.io/blog/other/Application/Structure/ELF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Structure/ELF/</guid><description>ELF Header Program Header Segment</description></item><item><title>File System</title><link>https://anko9801.github.io/blog/other/Application/Structure/FAT32/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Structure/FAT32/</guid><description>ファイルシステム VFS
File Allocation Table (FAT) FAT32 NTFS ExFAT FAT32 FAT とは Microsoft によって開発されたいくつかのファイルシステム(FAT12, FAT16, FAT32, VFAT, exFAT)の総称です。</description></item><item><title>Network</title><link>https://anko9801.github.io/blog/other/Application/Network/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Network/network/</guid><description>ネットワーク 1990年 10BASE-T
Ethernet 米Xerox のパロアルト研究所(PARC)に所属していたロバート・メカトーフ氏によって発明された。 初期実験は3Mbps 現在は最大400Gbpsの規格がある フレーム構造の規格 IEEE 802.3
TCP/IP TCP BBR QUIC shigeki/ask_nishida_about_quic_jp: QUICトランスポート機能に関して tcpm/mptcp wg chair の西田先生にいろいろ聞いてみる会 (github.</description></item><item><title>Nginx (リバースプロキシ)チューニング</title><link>https://anko9801.github.io/blog/other/Application/Server/reverse-proxy-optimization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Server/reverse-proxy-optimization/</guid><description>サーバー分割 DB分ける リクエストのロードバランス ロードバランサー セッションパーシステンス
worker_processesにそれぞれ均等にworker_connectionsが分配される訳ではないので余裕をもって設定すべき https://nrok81.hatenablog.com/entry/2014/11/12/191240
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 worker_processesauto;# コア数と同じ数まで増やすと良いかも # nginx worker の設定 worker_rlimit_nofile4096;events{worker_connections1024;# 128より大きくするなら、 5_os にしたがって max connection 数を増やす必要あり（デフォルトで`net.</description></item><item><title>NIC (Network Interface Card)</title><link>https://anko9801.github.io/blog/other/Application/OS/NIC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/OS/NIC/</guid><description>マザボに差して動くもの: PCI デバイス USBに差して動くもの: USB デバイス</description></item><item><title>OS</title><link>https://anko9801.github.io/blog/other/Application/OS/OS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/OS/OS/</guid><description>PXE(Preboot eXecution Environment) Boot
システムコール Basic Input/Output System: BIOS ハードウェアの初期化 OS や bootloader へのサービスの提供 Unified Extensible Firmware Interface: UEFI 割り込みの仕組みを知りたい io_uring mem_info</description></item><item><title>RDBMS</title><link>https://anko9801.github.io/blog/other/Application/Server/RDBMS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Server/RDBMS/</guid><description>データベースとは B-Tree/B+TreeLSMツリーと呼ばれる平衡N分木で構築されたデータの集合。メモリ/実行時間最適化、排他制御をよしなにやってくれます。 やり取りに人間がわかりやすい言葉DDL(Data Definition Language) DML(Data Manipulation Language) DCL(Data Control Language)を使ってDBを操作します。例えばStructured Query Language(SQL)などがあります。 データベースシステムとSQLはごっちゃにして言われやすいので注意。例えば、MariaDBはMySQLから派生したRelational Database Management System(RDBMS)の一種だとか、Not only SQL(NoSQL)はクラウドのDBに対してネットワーク伝送コストを避けて最適化された非RDBMSで、MongoDBやAWSのDynamoDB, Redisがそれに含まるなど。 具体的にどんな処理がされているのか 工事中 :::spoiler https://zenn.</description></item><item><title>Rendering Engine</title><link>https://anko9801.github.io/blog/other/Application/Rendering/Rendering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Rendering/Rendering/</guid><description>DirectX Vulkan</description></item><item><title>Root kit</title><link>https://anko9801.github.io/blog/other/Circuit/Rootkit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Circuit/Rootkit/</guid><description>North bridge dsn2021.pdf (xgao-work.github.io)
PCI Rootkit Implementing and Detecting a PCI Rootkit
Peripheral Component Interconnect: PCI はマザーボード</description></item><item><title>SAT SMT</title><link>https://anko9801.github.io/blog/other/Application/SAT-SMT/SAT-SMT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/SAT-SMT/SAT-SMT/</guid><description>SAT SAT (SATisfiability Problem) SATを解くには指数時間掛かると信じられている. 指数時間の中でも高速化していく技術を学ぶ.
$((a\land\lnot b\land\lnot c)\lor(b\land c\land\lnot d))\land(\lnot b\lor\lnot c) \to (a,b,c,d)=(t,f,f,t)$
単純な探索 まずは SAT に関する全探索を考える. 以下の方法は DPLL (Davis Putnam Logemann Loveland) アルゴリズムと呼ばれている.</description></item><item><title>Software Defined Radio</title><link>https://anko9801.github.io/blog/other/Application/Network/SDR/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Network/SDR/</guid><description>無線機
![[Pasted image 20220924223810.png]]
GNU Radio
USRP B205mini-i HackRF GNU Radioで遊ぶ超高速ディジタル無線スタータキット “USRP B205mini-i” (zep.co.jp)</description></item><item><title>TEE</title><link>https://anko9801.github.io/blog/other/Circuit/HIEE/TEE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Circuit/HIEE/TEE/</guid><description>Trusted Execution Environment: TEE とはプロセッサ上に隔離された実行環境を用意することでセキュリティを高める技術です。 Normal Mode Secure Mode
Intel SGX ARM TrustZone RISC-V Keystone Intel SGX - Remote Attestation概説 - Qiita</description></item><item><title>TPM</title><link>https://anko9801.github.io/blog/other/Circuit/HIEE/TPM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Circuit/HIEE/TPM/</guid><description>TPM 2.0 TPM (Trusted Platform Module)
暗号化用アルゴリズムエンジン、ハッシュエンジン、鍵生成器、乱数生成器、不揮発性メモリ(鍵などを保管)などを備えたモジュールで、TPM内への暗号キーの作成や使用制限をするために利用される。
TPM (Trust) ハードウェアとして開発
Windows BitLocker A Bad Dream 規格</description></item><item><title>ZIP</title><link>https://anko9801.github.io/blog/other/Application/Structure/ZIP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Structure/ZIP/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [local file header 1] [file data 1] [data descriptor 1] .</description></item><item><title>エミュレータ</title><link>https://anko9801.github.io/blog/other/Application/Virtualization/Emulator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Virtualization/Emulator/</guid><description>エミュレータとはハードウェアをソフトウェアで再現するプログラム。</description></item><item><title>コンテナ仮想化技術</title><link>https://anko9801.github.io/blog/other/Application/Virtualization/Container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Virtualization/Container/</guid><description>マルチステージビルド ビルド環境と実行環境のコンテナを分けることでサイズを抑えられる.
Kubernetes q3k/cve-2019-5736-poc: Unweaponized Proof of Concept for CVE-2019-5736 (Docker escape) (github.com) Dragon Sector: CVE-2019-5736: Escape from Docker and Kubernetes containers to root on host Security Camp B6 (notion.</description></item><item><title>シェル芸</title><link>https://anko9801.github.io/blog/other/Application/Programming/Shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Programming/Shell/</guid><description>雰囲気でシェルを使っている人のためのシェル入門 | κeenのHappy Hacκing Blog (keens.github.io) A Tutorial on Portable Makefiles (nullprogram.com)</description></item><item><title>シェーダー</title><link>https://anko9801.github.io/blog/other/Application/Rendering/Shader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Rendering/Shader/</guid><description>シェーダ言語 GLSL
つぶやきGLSL</description></item><item><title>シンボリック実行エンジン</title><link>https://anko9801.github.io/blog/other/Application/SAT-SMT/symbolic_execution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/SAT-SMT/symbolic_execution/</guid><description>説明 プログラム上で目的の地点に到達したいとき、それに当てはまるような入力値の条件を数学的に解くプログラム。条件分岐ごとに条件式を追加してそれをSMTソルバに解かせる。
Concolic Execution SSA形式とCFGが対応する Taint 解析
計算量 条件分岐数を $N$ として $O(2^N)$
実装 レジスタ, メモリに関する制約とSSA形式のIRを条件式としてSMTソルバで解く。
Rustでの実装 (mini_symbolic) 使用例 シンボリック実行エンジンのプロジェクト angr のサンプルコード。</description></item><item><title>ツール</title><link>https://anko9801.github.io/blog/other/Application/Tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Tools/</guid><description>Mac
Raycast Windows
PowerToys ImHex Ear Trumpet WizTree Obsidian XP-PEN
ある単語について検索結果の要約をポップアップで表示する拡張機能
Splunk
PEGを正規表現の拡張として使えるようなもの
デスクトップアプリ
Electron (TS) Dioxus (Rust) トークナイザ</description></item><item><title>ツールチェーン</title><link>https://anko9801.github.io/blog/other/Application/Programming/toolchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Programming/toolchain/</guid><description>toolchain ツールチェーンとはソースコードを実行する一連の処理に必要なソフトウェアのこと。要はどんな開発にも必要なツールセットである。
![[toolchain.svg]]
コンパイラ ![[compiler.svg]]
コンパイル中にコンパイルする「コンパイル時Cコンパイラ」をつくった話 - kw-udonの日記 (hatenablog.com) keiichiw/constexpr-8cc: Compile-time C Compiler implemented as C++14 constant expressions (github.com) コンパイル時Brainfuckコンパイラ ――C++14 constexpr の進歩と限界―― - ボレロ村上 - ENiyGmaA Code (hateblo.</description></item><item><title>ディープラーニング</title><link>https://anko9801.github.io/blog/other/Application/DeepLearning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/DeepLearning/</guid><description>モデル GPT BERT Tiiiger/bert_score: BERT score for text generation (github.com)
Transformer 作って理解する Transformer / Attention - Qiita
AI security バックドア 特定の入力データ(トリガー)を意図したクラスに誤分類させる トリガー以外の入力データは正しく分類されるので検知は困難 Mitigation</description></item><item><title>ハイパーバイザー</title><link>https://anko9801.github.io/blog/other/Application/Virtualization/Hypervisor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Virtualization/Hypervisor/</guid><description>x86を仮想化可能なアーキテクチャへ拡張したものVT-x (Vanderpool Technology)
ハイパーバイザの作り方 (syuu1228.github.io)</description></item><item><title>バックエンド最適化</title><link>https://anko9801.github.io/blog/other/Application/Server/rdbms-optimization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Server/rdbms-optimization/</guid><description>Cache
Copy on Write An Overview of Query Optimization in Relational Systems 論文紹介 - Google スライド
O/R Mapper
ISUCONメモ https://github.</description></item><item><title>フロントエンド最適化</title><link>https://anko9801.github.io/blog/other/Application/Server/frontend-optimization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Server/frontend-optimization/</guid><description>Web Performance lighthouse
先読み/遅延読み込み Resource Hints Priority Hints リソースの優先度をブラウザに認識させ、読み込み順序を最適化できます。初期画面に必要なリソースの読み込みが後方にある場合、その分LCPやFIDが遅延することになります。 link rel=preload script async/defer img/iframe loading=&amp;quot;lazy&amp;quot;
配信削減 圧縮 gzip brotli圧縮</description></item><item><title>ブロックチェーン</title><link>https://anko9801.github.io/blog/other/Application/Blockchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Blockchain/</guid><description>トランザクションをgit管理する。 H( H(transaction | prev_hash | created_at) | nonce) = 0000,,, 疑問 ある部分から先頭まで整合するように改変すれば改ざんできそうじゃない？
多くの人が何か価値があると思っているから価値がある。</description></item><item><title>プログラミング言語</title><link>https://anko9801.github.io/blog/other/Application/Programming/Programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Programming/Programming/</guid><description>プログラミング言語入門 任意の実行はデータとアクションで構成されている。 それを人間にとってわかりやすく書きやすい形にするがプログラミング言語が必要とされる理由であり、データとアクションの関係性における多様なデザインがプログラミング言語の多様性の理由である。
データとアクションの関係性はロジックや階層構造によって表現される。 そして計算モデルに意味を与える意味論的な解釈を取り込みつつ解説する。
最初は抽象的で簡単なところから始まり、具体的で難しい問題に立ち向かう。 対象者
任意の言語を素早く習得したい方 基礎から理解して安心したい方 新しい言語を実装したい方 情報に踊らされずちゃんと軸を持つには論理で情報を作り出さないといけない。
第一章 型 TODO: なぜここで型を説明するのか 馴染み深いから？前提知識として持っていないと抽象論を展開できないから？あいまいな定義や同義な言葉が各言語にあるのでまとめて扱う為に一回必要
ここでは公理的に計算するところはつまらんので省いて、なるべく実践的、アイデアが得られる点を紹介する。何故かというと私は計算より抽象的なことの方が好きだからです。不足分については型理論の方で説明します。($\lambda, \pi, \mu$ 計算, 線形型, Boehm-Berarducci encodingなど)</description></item><item><title>プロセッサ</title><link>https://anko9801.github.io/blog/other/Application/Processor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Processor/</guid><description>CPU 概要 CPU
LGA BGA QFP GPU iGPU(internal) CPU内にあるグラボ dGPU(discrete) NVMe/SATA/PCIeなどで接続する外付けのグラボ eGPU(external) Thunderbolt 3/4などで接続する外付けのグラボ TPU 行列積演算 FPU GPGPU</description></item><item><title>マルウェア</title><link>https://anko9801.github.io/blog/other/Application/Malware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Malware/</guid><description>CTF Radiooo - Episodes
マルウェア分類 Warez
非合法的に配布・販売されている商用ソフトウェア 日本では「ワレズ」と呼び、それが派生して「割れ」となった WannaCry
マルウェアの1種 EternalBlue システム管理ツール PowerShell, PsExec ペネトレーションテストツール Cobalt Strike Beacon クラウドサービス Dropbox, OneDrive</description></item><item><title>リバースプロキシ</title><link>https://anko9801.github.io/blog/other/Application/Server/reverse-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Server/reverse-proxy/</guid><description>ロードバランサ OCSP stapling</description></item><item><title>レイトレーシング, パストレーシング</title><link>https://anko9801.github.io/blog/other/Application/Rendering/RayTracing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Rendering/RayTracing/</guid><description>説明 レイトレーシング(Ray Tracing)とはCGを作成する技術の一つ。視点からレイ(Ray)と呼ばれる仮想の光線を飛ばし, 反射・屈折を繰り返して, 光源に当たればそこから逆算して画素を表示する仕組みです。
ガンマ補正 $(R^{2.2}, G^{2.2}, B^{2.2})$
PPM画像というASCIIで画素を表現する規格を用いると楽
物理ベースレンダリング理論 ある波長 $\lambda$ の光のエネルギー $$e_\lambda=\frac{hc}{\lambda}$$ スペクトル放射エネルギー $$ \begin{aligned} Q_\lambda&amp;amp;=ne_\lambda \ Q&amp;amp;=\int_0^\infty Q_\lambda d\lambda \end{aligned} $$ スペクトル放射束 $$ \begin{aligned} \Phi_\lambda&amp;amp;=\frac{dQ_\lambda}{dt} \ \Phi&amp;amp;=\frac{dQ}{dt} \end{aligned} $$ 放射輝度 $$L(x,\vec\omega)=\frac{d^2\Phi}{\cos\theta dAd\vec\omega}$$</description></item><item><title>型理論</title><link>https://anko9801.github.io/blog/other/Application/Programming/Type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Programming/Type/</guid><description>型理論 型はグロタンディーク宇宙の中であることを断っておく。
論理 最小述語論理+矛盾律 = 直観主義論理 直観主義論理+排中律 = 古典論理: ゲンツェンの自然演繹(NK)
型無しラムダ計算 α-変換 : 束縛変数の名前は重要ではない β-簡約 : 関数適用 η-変換 : 2つの関数について任意の引数を関数適用した値が等しいならば、2つの関数は等しい</description></item><item><title>定理証明支援系</title><link>https://anko9801.github.io/blog/other/Application/SAT-SMT/proof_assistant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/SAT-SMT/proof_assistant/</guid><description>説明 計算量 実装 使用例 参考 一人Computer Science Advent Calendar 2017</description></item><item><title>無線</title><link>https://anko9801.github.io/blog/other/Application/Network/%E9%AB%98%E5%91%A8%E6%B3%A2-%E7%84%A1%E7%B7%9A-%E9%80%9A%E4%BF%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Network/%E9%AB%98%E5%91%A8%E6%B3%A2-%E7%84%A1%E7%B7%9A-%E9%80%9A%E4%BF%A1/</guid><description/></item><item><title>競プロテンプレート</title><link>https://anko9801.github.io/blog/other/template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/template/</guid><description>説明 競プロで使うテンプレート
実装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 #ifndef LOCAL #pragma GCC optimize(&amp;#34;Ofast&amp;#34;) #pragma GCC optimize(&amp;#34;unroll-loops&amp;#34;) #endif #include &amp;lt;bits/stdc++.</description></item><item><title>音声コーデック</title><link>https://anko9801.github.io/blog/other/Application/Network/%E9%9F%B3%E5%A3%B0%E3%82%B3%E3%83%BC%E3%83%87%E3%83%83%E3%82%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Network/%E9%9F%B3%E5%A3%B0%E3%82%B3%E3%83%BC%E3%83%87%E3%83%83%E3%82%AF/</guid><description/></item></channel></rss>