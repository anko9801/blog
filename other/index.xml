<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Others on</title><link>https://anko9801.github.io/blog/other/</link><description>Recent content in Others on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://anko9801.github.io/blog/other/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://anko9801.github.io/blog/other/Application/Blockchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Blockchain/</guid><description>トランザクションをgit管理する。 H( H(transaction | prev_hash | created_at) | nonce) = 0000,,, 疑問 ある部分から先頭まで整合するように改変すれば改ざんできそうじゃない？
多くの人が何か価値があると思っているから価値がある。</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Container/</guid><description>Kubernetes q3k/cve-2019-5736-poc: Unweaponized Proof of Concept for CVE-2019-5736 (Docker escape) (github.com) Dragon Sector: CVE-2019-5736: Escape from Docker and Kubernetes containers to root on host Security Camp B6 (notion.</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/DeepLearning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/DeepLearning/</guid><description>モデル GPT BERT Transformer 作って理解する Transformer / Attention - Qiita
AI security バックドア 特定の入力データ(トリガー)を意図したクラスに誤分類させる トリガー以外の入力データは正しく分類されるので検知は困難 Mitigation
信頼できないドメインから入手した事前学習モデルを使用しない 汚染されていないデータで再学習する 敵対的サンプル 誤分類を誘発させる AIと人間両方を騙す攻撃 ex.</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Hypervisor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Hypervisor/</guid><description>x86を仮想化可能なアーキテクチャへ拡張したものVT-x (Vanderpool Technology)
ハイパーバイザの作り方 (syuu1228.github.io)</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Malware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Malware/</guid><description>Warez
非合法的に配布・販売されている商用ソフトウェア 日本では「ワレズ」と呼び、それが派生して「割れ」となった WannaCry
マルウェアの1種で EternalBlue システム管理ツール PowerShell, PsExec ペネトレーションテストツール Cobalt Strike Beacon クラウドサービス Dropbox, OneDrive</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Network/SDR/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Network/SDR/</guid><description>無線機
![[Pasted image 20220924223810.png]]
GNU Radio
USRP B205mini-i HackRF GNU Radioで遊ぶ超高速ディジタル無線スタータキット “USRP B205mini-i” (zep.co.jp)</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Network/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Network/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/</guid><description>ネットワーク 1990年 10BASE-T
Ethernet 米Xerox のパロアルト研究所(PARC)に所属していたロバート・メカトーフ氏によって発明された。 初期実験は3Mbps 現在は最大400Gbpsの規格がある フレーム構造の規格 IEEE 802.3
TCP/IP TCP BBR Network Interface Card: NIC Data Plane Development Kit: DPDK ユーザー空間で NIC を操作するフレームワーク。 カーネルでの処理がオーバーヘッド。具体的には NIC へデータが到達したときの割り込みなど Pull Mode Driver: PMD と呼ばれるポーリングベースの受信機構 ただしカーネルを通さない為、パケットキャプチャーが不可能 DPDK Nginx は Nginx に比べ約3倍高速[2]</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Network/%E9%9F%B3%E5%A3%B0%E3%82%B3%E3%83%BC%E3%83%87%E3%83%83%E3%82%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Network/%E9%9F%B3%E5%A3%B0%E3%82%B3%E3%83%BC%E3%83%87%E3%83%83%E3%82%AF/</guid><description/></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Network/%E9%AB%98%E5%91%A8%E6%B3%A2-%E7%84%A1%E7%B7%9A-%E9%80%9A%E4%BF%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Network/%E9%AB%98%E5%91%A8%E6%B3%A2-%E7%84%A1%E7%B7%9A-%E9%80%9A%E4%BF%A1/</guid><description/></item><item><title/><link>https://anko9801.github.io/blog/other/Application/OS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/OS/</guid><description>PXE(Preboot eXecution Environment) Boot
Basic Input/Output System: BIOS ハードウェアの初期化 OS や bootloader へのサービスの提供 Unified Extensible Firmware Interface: UEFI 割り込みの仕組みを知りたい タスク ジョブ、プロセス、スレッド</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Processor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Processor/</guid><description>CPU 概要 CPU
LGA BGA QFP GPU iGPU(internal) CPU内にあるグラボ dGPU(discrete) NVMe/SATA/PCIeなどで接続する外付けのグラボ eGPU(external) Thunderbolt 3/4などで接続する外付けのグラボ TPU 行列積演算 FPU GPGPU</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Programming/</guid><description>プログラミング言語入門 任意の実行はデータとアクションで構成されている。 それを人間にとってわかりやすく書きやすい形にするがプログラミング言語が必要とされる理由であり、データとアクションの関係性における多様なデザインがプログラミング言語の多様性の理由である。
データとアクションの関係性はロジックや階層構造によって表現される。 そして計算モデルに意味を与える意味論的な解釈を取り込みつつ解説する。
最初は抽象的で簡単なところから始まり、具体的で難しい問題に立ち向かう。 対象者
任意の言語を素早く習得したい方 基礎から理解して安心したい方 新しい言語を実装したい方 情報に踊らされずちゃんと軸を持つには論理で情報を作り出さないといけない。
第一章 型 TODO: なぜここで型を説明するのか 馴染み深いから？前提知識として持っていないと抽象論を展開できないから？あいまいな定義や同義な言葉が各言語にあるのでまとめて扱う為に一回必要
ここでは公理的に計算するところはつまらんので省いて、なるべく実践的、アイデアが得られる点を紹介する。何故かというと私は計算より抽象的なことの方が好きだからです。不足分については型理論の方で説明します。($\lambda, \pi, \mu$ 計算, 線形型, Boehm-Berarducci encodingなど)</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Rendering/RayTracing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Rendering/RayTracing/</guid><description>説明 レイトレーシング(Ray Tracing)とはCGを作成する技術の一つ。 目からレイ(Ray)と呼ばれる仮想の光線を飛ばして光源に当たれば
PPM画像という数値をASCII, 区切り文字を空白で画素を表現する規格を用いると楽
ベクトル空間を定義して法線ベクトル
物理ベースレンダリング理論 レンダリング方程式
$$ L_e(x, \vec{\omega_r})+\int_\Omega f(x,\vec{\omega_i},\vec{\omega_r})L_i(x,\vec{\omega_i})\cos\theta d\vec{\omega_i} $$</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Rendering/Rendering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Rendering/Rendering/</guid><description>DirectX Vulkan
シェーダ言語 GLSL</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Rendering/Shader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Rendering/Shader/</guid><description/></item><item><title/><link>https://anko9801.github.io/blog/other/Application/SAT-SMT/SAT-SMT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/SAT-SMT/SAT-SMT/</guid><description>$$ \newcommand{\not}{\overline} $$
Equality Logic With Uninterpreted Functions: EUF が SMT を含む SAT: SATisfiability Problem $((a\land\not b\land\not c)\lor(b\land c\land\not d))\land(\not b\lor\not c)$ $(a,b,c,d)=(t,f,f,t)$</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Server/AWS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Server/AWS/</guid><description>7777 - Your remote AWS database on your local port 7777</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Server/RDBMS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Server/RDBMS/</guid><description>isolation level 複数のトランザクションが1つのテーブルを操作するときの不整合についてどの程度許容するか
READ UNCOMMITTED &amp;hellip; COMMIT されてないトランザクションの変更を参照できる READ COMMITTED &amp;hellip; COMMIT されたトランザクションの変更を参照できる REPEATABLE READ &amp;hellip; COMMIT されたトランザクションの追加を参照できる SERIALIZE &amp;hellip; 参照不可 2以降を実現する為には SELECT で共有ロック, UPDATE INSERT で専有ロックを取得すればよい.</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Server/ReverseProxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Server/ReverseProxy/</guid><description>ロードバランサ OCSP stapling</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Shell/</guid><description>雰囲気でシェルを使っている人のためのシェル入門 | κeenのHappy Hacκing Blog (keens.github.io) A Tutorial on Portable Makefiles (nullprogram.com)</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Structure/ELF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Structure/ELF/</guid><description>ELF Header Program Header Segment</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Structure/FAT32-ext4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Structure/FAT32-ext4/</guid><description>ファイルシステム VFS
File Allocation Table (FAT) FAT32 NTFS ExFAT FAT32 FAT とは Microsoft によって開発されたいくつかのファイルシステム(FAT12, FAT16, FAT32, VFAT, exFAT)の総称です。</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Structure/TCPIP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Structure/TCPIP/</guid><description>1500B</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Structure/ZIP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Structure/ZIP/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [local file header 1] [file data 1] [data descriptor 1] .</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/toolchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/toolchain/</guid><description>Compiler AST
Linker Loader assembler disassembler decompiler バイナリを入れてLLVM IR に変換後, 最適化する facebookincubator/BOLT: Binary Optimization and Layout Tool - A linux command-line utility used for optimizing performance of binaries (github.</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Tools/</guid><description>Mac
Raycast Windows
PowerToys ImHex Ear Trumpet WizTree Obsidian XP-PEN
ある単語について検索結果の要約をポップアップで表示する拡張機能
Splunk</description></item><item><title/><link>https://anko9801.github.io/blog/other/Application/Type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Type/</guid><description>型理論 型はグロタンディーク宇宙の中であることを断っておく。
論理 最小述語論理+矛盾律 = 直観主義論理 直観主義論理+排中律 = 古典論理: ゲンツェンの自然演繹(NK)
型無しラムダ計算 α-変換 : 束縛変数の名前は重要ではない β-簡約 : 関数適用 η-変換 : 2つの関数について任意の引数を関数適用した値が等しいならば、2つの関数は等しい</description></item><item><title/><link>https://anko9801.github.io/blog/other/Circuit/FPGA-HDL-%E8%AB%96%E7%90%86%E5%9B%9E%E8%B7%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Circuit/FPGA-HDL-%E8%AB%96%E7%90%86%E5%9B%9E%E8%B7%AF/</guid><description/></item><item><title/><link>https://anko9801.github.io/blog/other/Circuit/PC%E5%91%A8%E8%BE%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Circuit/PC%E5%91%A8%E8%BE%BA/</guid><description>ディスク CrystalDisk CrystalDiskMark
スクリーン ブラウン管 ニキシー管 液晶</description></item><item><title/><link>https://anko9801.github.io/blog/other/Circuit/Rootkit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Circuit/Rootkit/</guid><description>North bridge dsn2021.pdf (xgao-work.github.io)
PCI Rootkit Implementing and Detecting a PCI Rootkit
Peripheral Component Interconnect: PCI はマザーボード</description></item><item><title/><link>https://anko9801.github.io/blog/other/Circuit/%E3%82%A2%E3%83%8A%E3%83%AD%E3%82%B0-%E3%82%BB%E3%83%B3%E3%82%B5%E3%83%BC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Circuit/%E3%82%A2%E3%83%8A%E3%83%AD%E3%82%B0-%E3%82%BB%E3%83%B3%E3%82%B5%E3%83%BC/</guid><description>液晶</description></item><item><title/><link>https://anko9801.github.io/blog/other/Circuit/%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E5%88%B6%E5%BE%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Circuit/%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E5%88%B6%E5%BE%A1/</guid><description>モーターコントローラー Hブリッジを用いて電気を流し正転、逆転するのと逆起電力によるブレーキを操作している。 MOSFET を4つ</description></item><item><title/><link>https://anko9801.github.io/blog/other/Circuit/%E3%83%91%E3%83%AF%E3%82%A8%E3%83%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Circuit/%E3%83%91%E3%83%AF%E3%82%A8%E3%83%AC/</guid><description>電源 LCRメーター</description></item><item><title/><link>https://anko9801.github.io/blog/other/Circuit/%E3%83%9E%E3%82%A4%E3%82%B3%E3%83%B3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Circuit/%E3%83%9E%E3%82%A4%E3%82%B3%E3%83%B3/</guid><description>マイコンの一番楽しい所ってなに
主に次を使うことが多いです。
ATmega328P (Arduino) RP2040 (Raspberry Pi Pico) STM32 Nucleo (STM32F303K8) Universal Asynchronous Receiver/Transmitter: UART
Hardware Abstraction Layer (HAL)</description></item><item><title/><link>https://anko9801.github.io/blog/other/Idea/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Idea/</guid><description>version update時の確認不足で何かしらの悪意のあるプログラムを入れることができる</description></item><item><title/><link>https://anko9801.github.io/blog/other/streat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/streat/</guid><description>物理学 生物学 ロケット 飛行
回路 トランジスタ (NPN接合)
AVRマイコンライター自作 電源自作 JTAG によるデバッグ FPGA による RISC-V CPU 自作 CPU Break toolchain 自作 プログラミング言語自作 OS自作 Kernel Exploit ロスレス音声コーデック (PARCOR係数・エンコード済み残差信号) Video DeepLearning</description></item><item><title>fast</title><link>https://anko9801.github.io/blog/other/Application/Server/fast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/Server/fast/</guid><description>Cache
Copy on Write An Overview of Query Optimization in Relational Systems 論文紹介 - Google スライド
O/R Mapper
ISUCONメモ https://github.</description></item><item><title>TEE</title><link>https://anko9801.github.io/blog/other/Circuit/TEE-TPM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Circuit/TEE-TPM/</guid><description>Trusted Execution Environment: TEE とはプロセッサ上に隔離された実行環境を用意することでセキュリティを高める技術です。 Normal Mode Secure Mode
Intel SGX ARM TrustZone RISC-V Keystone Trusted Platform Module: TPM 規格</description></item><item><title>シンボリック実行エンジン</title><link>https://anko9801.github.io/blog/other/Application/SAT-SMT/symbolic_execution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/SAT-SMT/symbolic_execution/</guid><description>説明 プログラム上で目的の地点に到達したいとき、それに当てはまるような入力値の条件を数学的に解くプログラム。条件分岐ごとに条件式を追加してそれをSMTソルバに解かせる。
Concolic Execution SSA形式とCFGが対応する Taint 解析
計算量 条件分岐数を $N$ として $O(2^N)$
実装 レジスタ, メモリに関する制約とSSA形式のIRを条件式としてSMTソルバで解く。
Rustでの実装 (mini_symbolic) 使用例 シンボリック実行エンジンのプロジェクト angr のサンプルコード。</description></item><item><title>定理証明支援系</title><link>https://anko9801.github.io/blog/other/Application/SAT-SMT/proof_assistant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/Application/SAT-SMT/proof_assistant/</guid><description>説明 計算量 実装 使用例 参考 一人Computer Science Advent Calendar 2017</description></item><item><title>競プロテンプレート</title><link>https://anko9801.github.io/blog/other/template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/other/template/</guid><description>説明 競プロで使うテンプレート
実装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 #ifndef LOCAL #pragma GCC optimize(&amp;#34;Ofast&amp;#34;) #pragma GCC optimize(&amp;#34;unroll-loops&amp;#34;) #endif #include &amp;lt;bits/stdc++.</description></item></channel></rss>