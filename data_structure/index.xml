<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data_structures on</title><link>https://anko9801.github.io/blog/data_structure/</link><description>Recent content in Data_structures on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://anko9801.github.io/blog/data_structure/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://anko9801.github.io/blog/data_structure/LinkedList/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/data_structure/LinkedList/</guid><description>1 2 3 4 pub enum List { Empty, Elem(i32, List), }</description></item><item><title>Binary Indexed Tree</title><link>https://anko9801.github.io/blog/data_structure/bit/bit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/data_structure/bit/bit/</guid><description>説明 計算量 add $O(\log N)$ sum $O(\log N)$ 実装 {% include cpp.html code=&amp;ldquo;data_structure/bit/bit.hpp&amp;rdquo; %}
使用例 {% include cpp.html code=&amp;ldquo;data_structure/bit/bit_ex.</description></item><item><title>Segment tree beats</title><link>https://anko9801.github.io/blog/data_structure/segtree/segtreebeats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/data_structure/segtree/segtreebeats/</guid><description>説明 計算量 実装 {% include cpp.html code=&amp;ldquo;data_structure/segtree/segtreebeats.hpp&amp;rdquo; %}
使用例</description></item><item><title>Slope Trick</title><link>https://anko9801.github.io/blog/data_structure/slope_trick/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/data_structure/slope_trick/</guid><description>説明 計算量 実装 {% include cpp.html code=&amp;ldquo;data_structure/slope_trick.hpp&amp;rdquo; %}
使用例 参考 slope trick (1) 解説編 slope trick (2) 問題編</description></item><item><title>UnionFind</title><link>https://anko9801.github.io/blog/data_structure/unionfind/unionfind/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/data_structure/unionfind/unionfind/</guid><description>説明 素集合を管理するデータ構造。内部的には森となっていて同じルートを持つ木の要素は同じ素集合にあると解釈して併合/比較を行う。
以下の工夫により高速化できる。
経路圧縮 (path compression) 再帰的に根を調べる際に根に直接つなぎ直す 併合の工夫 併合時に木の高さ/大きさが小さい方を大きい方へ繋げる union by rank: 木の高さ union by size: 木の大きさ 計算量 経路圧縮のみ $O(\log{N})$ 併合の工夫のみ $O(\log{N})$ 両方 $O(\alpha(N))$</description></item><item><title>セグメント木</title><link>https://anko9801.github.io/blog/data_structure/segtree/segtree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/data_structure/segtree/segtree/</guid><description>説明 計算量 実装 {% include cpp.html code=&amp;ldquo;data_structure/segtree/segtree.hpp&amp;rdquo; %}
使用例</description></item><item><title>ポテンシャル付きUnionFind</title><link>https://anko9801.github.io/blog/data_structure/unionfind/potential_unionfind/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/data_structure/unionfind/potential_unionfind/</guid><description>説明 各頂点はポテンシャルを管理する。ポテンシャルの差がインターフェースとなる。重み付きUnionFindとも言う。
計算量 $O(\alpha(N))$
実装 {% include cpp.html code=&amp;ldquo;data_structure/unionfind/potential_unionfind.hpp&amp;rdquo; %}
使用例</description></item><item><title>永続UnionFind</title><link>https://anko9801.github.io/blog/data_structure/unionfind/persist_unionfind/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/data_structure/unionfind/persist_unionfind/</guid><description>説明 計算量 実装 {% include cpp.html code=&amp;ldquo;data_structure/unionfind/persist_unionfind.hpp&amp;rdquo; %}
使用例</description></item><item><title>遅延セグメント木</title><link>https://anko9801.github.io/blog/data_structure/segtree/lazysegtree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anko9801.github.io/blog/data_structure/segtree/lazysegtree/</guid><description>説明 計算量 実装 {% include cpp.html code=&amp;ldquo;data_structure/segtree/lazysegtree.hpp&amp;rdquo; %}
使用例</description></item></channel></rss>